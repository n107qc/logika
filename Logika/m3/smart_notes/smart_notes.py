# –æ—Å–Ω–æ–≤–∞ü•ü
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, 
    QHBoxLayout, QVBoxLayout, QListWidget, QLineEdit, 
    QTextEdit, QInputDialog, QTableWidget,  QListWidgetItem,
    QFormLayout, QGroupBox, QButtonGroup, QRadioButton, QSpinBox,QMessageBox)
import json

def saveToFile():
    with open('note.json', 'w', encoding='utf8') as file:
        json.dump(notes, file, ensure_ascii=False, sort_keys=True, indent=4)

app = QApplication([])

window = QWidget()




filed_text = QTextEdit()
lb_notes = QLabel("–°–ø–∏—Å–æ–∫ –ó–∞–º—ñ—Ç–æ–∫ ‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§ü•ñ")
lst_notes = QListWidget()

# –≤–µ—Ä—Ö–Ω—ñ –∫–Ω–æ–ø–æ—á–∫–∏
btn_note_create = QPushButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ œà(ÔΩÄ‚àá¬¥)œàüç∞")
btn_note_delete = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏ O(‚à©_‚à©)Oü•ì")
btn_note_save = QPushButton("–ó–±–µ—Ä–∏–≥—Ç–∏ \^o^/ü•©")

filed_tag = QLineEdit()
lb_tags = QLabel('–°–ø–∏—Å–æ–∫ –¢–µ–≥—ñ–≤ (ÔΩûÔø£‚ñΩÔø£)ÔΩûü•Ç')
lst_tags = QListWidget()


# –Ω–∏–∂–Ω—ñ –∫–Ω–æ–ø–æ—á–∫–∏
btn_tag_add = QPushButton("–î–æ–¥–∞—Ç–∏ —Ç–µ–≥ ‚óëÔπè‚óê‚òï")
btn_tag_del = QPushButton("–í—ñ–¥–∫—Ä—ñ–ø–∏—Ç–∏ –≤—ñ–¥ –∑–∞–º—ñ—Ç–∫–∏ (‚úø‚óï‚Äø‚óï‚úø)ü•û")
btn_tag_search = QPushButton("–®—É–∫–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º (‚òÖ œâ ‚òÖ)üçï")

#—à—Ç—É–∫–∏ –¥–ª—è –ø–∞—Ä–æ–ª—é
#set_password = QPushButton("–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ü–∞—Ä–æ–ª—å(Ôæâ*–§œâ–§)Ôæâ")



window.setStyleSheet('''
                        background-color: AliceBlue;
                        color: Navy;
                        font-size: 20px;
                        border: 2px solid Indigo; 
                        ''')

lst_notes.setStyleSheet('''
                        background-color: CornflowerBlue;
                        color: DarkBlue;
                        font-size: 20px;
                        border: 2px solid Chartreuse; 
                        ''')

btn_note_create.setStyleSheet('''
                        background-color: Crimson;
                        color: DarkSlateGrey;
                        font-size: 20px;
                        border: 2px solid DimGrey; 
                        ''')

btn_note_delete.setStyleSheet('''
                        background-color: OrangeRed;
                        color: Purple;
                        font-size: 20px;
                        border: 2px solid Teal; 
                        ''')

btn_note_save.setStyleSheet('''
                        background-color: DarkMagenta;
                        color: DarkRed;
                        font-size: 20px;
                        border: 2px solid Indigo; 
                        ''')


lst_tags.setStyleSheet('''
                        background-color: CornflowerBlue;
                        color: Coral;
                        font-size: 20px;
                        border: 2px solid DarkOliveGreen; 
                        ''')


btn_tag_add.setStyleSheet('''
                        background-color: Khaki;
                        color: LightCoral;
                        font-size: 20px;
                        border: 2px solid LightGoldenRodYellow; 
                        ''')

btn_tag_del.setStyleSheet('''
                        background-color: Green;
                        color: IndianRed;
                        font-size: 20px;
                        border: 2px solid DarkSlateGrey; 
                        ''')

btn_tag_search.setStyleSheet('''
                        background-color: CornflowerBlue;
                        color: BlueViolet;
                        font-size: 20px;
                        border: 2px solid Coral; 
                        ''')

loyout_notes = QHBoxLayout()
col1 = QVBoxLayout()
col2 = QVBoxLayout()

loyout_notes.addLayout(col1, stretch=2)
loyout_notes.addLayout(col2, stretch=1)

col1.addWidget(filed_text)
col2.addWidget(lb_notes)
col2.addWidget(lst_notes)
col2.addWidget(btn_note_create)
col2.addWidget(btn_note_delete)
col2.addWidget(btn_note_save)

col2.addWidget(lb_tags)
col2.addWidget(lst_tags)
col2.addWidget(filed_tag)
col2.addWidget(btn_tag_add)
col2.addWidget(btn_tag_del)
col2.addWidget(btn_tag_search)

def show_notes():
    key = lst_notes.currentItem().text()
    if '–ø–∞—Ä–æ–ª—å' in notes[key]:
        enter_password()
    else:
        filed_text.setText(notes[key]['—Ç–µ–∫—Å—Ç'])
        lst_tags.clear()
        lst_tags.addItems(notes[key]['—Ç–µ–≥–∏'])
        

    
def set_password():
    current_item = lst_notes.currentItem()
    if current_item:
        key = current_item.text()
        password, ok = QInputDialog.getText(window, '–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–æ–ª—å(‚ù§ œâ ‚ù§)', '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–º—ñ—Ç–∫–∏(‚ìø_‚ìø):')
        if ok:
            notes[key]['–ø–∞—Ä–æ–ª—å'] = password
            saveToFile()
    else:
        QMessageBox.warning(window, '–ü–æ–º–∏–ª–∫–∞(„ÄÄo=^‚Ä¢„Çß‚Ä¢)o„ÄÄ‚îè‚îÅ‚îì', '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∑–∞–º—ñ—Ç–∫—É –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é(„ÄÇ„Éªœâ„Éª„ÄÇ)')


def enter_password():
    key = lst_notes.currentItem().text()
    password, ok = QInputDialog.getText(window, '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å(o|o) ', '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å(„ÄÇ„Éªœâ„Éª„ÄÇ):')      
    if ok and notes[key].get('–ø–∞—Ä–æ–ª—å') == password:
        filed_text.setText(notes[key]['—Ç–µ–∫—Å—Ç'])
        lst_tags.clear()
        lst_tags.addItems(notes[key]['—Ç–µ–≥–∏'])
    elif ok:
        filed_text.clear()
        filed_tag.clear()
        QMessageBox.warning(window, '–ü–æ–º–∏–ª–∫–∞(„ÄÄo=^‚Ä¢„Çß‚Ä¢)o„ÄÄ‚îè‚îÅ‚îì', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å!(„ÄÇ„Éªœâ„Éª„ÄÇ)')

        saveToFile()

def note_create():
    note_name, ok = QInputDialog.getText(window, '–î–æ–¥–∞—Ç–∏ –ó–∞–º—ñ—Ç–∫—É', '–ù–æ–≤–∞ –∑–∞–º—ñ—Ç–∫–∞')
    if note_name and ok:
        lst_notes.addItem(note_name)
        notes[note_name] = {'—Ç–µ–∫—Å—Ç': "", '—Ç–µ–≥–∏': [], '–ø–∞—Ä–æ–ª—å': ""}
        saveToFile()
        
def note_delete():
    if lst_notes.currentItem():
        key = lst_notes.currentItem().text()
        del notes[key]

        filed_text.clear()
        lst_tags.clear()
        lst_notes.clear()
        lst_notes.addItems(notes)

        saveToFile()

    else:
        print("–ù–µ–º–æ–∂–Ω–∞")

def note_save():
    if lst_notes.currentItem():
        key = lst_notes.currentItem().text()
        notes[key]['—Ç–µ–∫—Å—Ç'] = filed_text.toPlainText()

        saveToFile()

def tag_add():
    key = lst_notes.currentItem().text()
    tag = filed_tag.text()

    notes[key]['—Ç–µ–≥–∏'].append(tag)

    lst_tags.addItem(tag)
    saveToFile()

    
def tag_del():
    key =lst_notes.currentItem().text()
    tag = lst_tags.currentItem().text()

    notes[key]['—Ç–µ–≥–∏'].remove(tag)

    lst_tags.clear()
    lst_tags.addItems(notes[key]['—Ç–µ–≥–∏'])

    saveToFile()


def tag_search():
    tag = filed_tag.text()

    if '–®—É–∫–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º (‚òÖ œâ ‚òÖ)üçï' == btn_tag_search.text():
        filtered_notes = {}

        for key in notes:
            if tag in notes[key]['—Ç–µ–≥–∏']:
                filtered_notes[key] = notes[key]

        btn_tag_search.setText('–°–∫–∏–Ω—É—Ç–∏ –ø–æ—à—É–∫(‚ìø_‚ìø)üç≥')

        lst_notes.clear()
        lst_notes.addItems(filtered_notes)
        lst_tags.clear()
        filed_text.clear()
        filed_tag.clear()

    elif  '–°–∫–∏–Ω—É—Ç–∏ –ø–æ—à—É–∫(‚ìø_‚ìø)üç≥' == btn_tag_search.text():
        btn_tag_search.setText('–®—É–∫–∞—Ç–∏ –∑–∞–º—ñ—Ç–∫–∏ –∑–∞ —Ç–µ–≥–æ–º (‚òÖ œâ ‚òÖ)üçï')
        
        lst_notes.clear()
        lst_notes.addItems(notes)
        lst_tags.clear()
        filed_text.clear()
        filed_tag.clear()


btn_note_save.clicked.connect(note_save)
btn_note_delete.clicked.connect(note_delete)
btn_note_create.clicked.connect(note_create)
btn_note_create.clicked.connect(set_password)
lst_notes.itemClicked.connect(show_notes)

btn_tag_add.clicked.connect(tag_add)
btn_tag_del.clicked.connect(tag_del)
btn_tag_search.clicked.connect(tag_search)



with open('note.json', 'r' , encoding = 'utf8') as file:
    notes = json.load(file)

lst_notes.addItems(notes)    

window.setLayout(loyout_notes)
window.show()
app.exec()